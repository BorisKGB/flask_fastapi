import threading
from multiprocessing import Process
import asyncio
import aiohttp
import requests
import time
from urls import urls

"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
üêÄ –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ 10 URL-
–∞–¥—Ä–µ—Å–æ–≤ –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –∫–∞–∂–¥–æ–≥–æ
–∞–¥—Ä–µ—Å–∞.
üêÄ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ
—Ñ–∞–π–ª—ã.
üêÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Ç–æ–∫–∏.
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
üêÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
üêÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥.
"""


def download(url):
    response = requests.get(url)
#    print(response.status_code)


def timed(func):
    def wrapper():
        t_start = time.time()
        func()
        t_end = time.time()
        print(t_end - t_start)
    return wrapper


@timed
def synced():
    for url in urls:
        download(url)


@timed
def threaded():
    threads = []
    for url in urls:
        thread = threading.Thread(target=download, args=[url])
        threads.append(thread)
        thread.start()
    for thread in threads:
        thread.join()


@timed
def processes():
    procs = []
    for url in urls:
        proc = Process(target=download, args=[url])
        procs.append(proc)
        proc.start()
    for proc in procs:
        proc.join()


async def async_download(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            text = await response.text()
            # print(response.status)

async def async_main():
    tasks = []
    for url in urls:
        task = asyncio.ensure_future(async_download(url))
        tasks.append(task)
    await asyncio.gather(*tasks)

@timed
def w_async():
    loop = asyncio.get_event_loop()  # method deprecated
    loop.run_until_complete(async_main())


if __name__ == '__main__':
    synced()
    threaded()
    processes()
    w_async()
